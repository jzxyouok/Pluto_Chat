package com.wl.pluto.plutochat.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wl.pluto.plutochat.entity.NearbyPeopleEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEARBY_PEOPLE_ENTITY".
*/
public class NearbyPeopleEntityDao extends AbstractDao<NearbyPeopleEntity, Long> {

    public static final String TABLENAME = "NEARBY_PEOPLE_ENTITY";

    /**
     * Properties of entity NearbyPeopleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "username", false, "USER_NAME");
        public final static Property UserNickName = new Property(2, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property UserHeadImageUrl = new Property(3, String.class, "userHeadImageUrl", false, "USER_HEAD_IMAGE_URL");
        public final static Property UserGender = new Property(4, String.class, "userGender", false, "USER_GENDER");
        public final static Property UserAddress = new Property(5, String.class, "userAddress", false, "USER_ADDRESS");
        public final static Property UserPersonalitySignature = new Property(6, String.class, "userPersonalitySignature", false, "USER_PERSONALITY_SIGNATURE");
        public final static Property UserDistance = new Property(7, String.class, "userDistance", false, "USER_DISTANCE");
    };


    public NearbyPeopleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NearbyPeopleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEARBY_PEOPLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: username
                "\"USER_NICK_NAME\" TEXT NOT NULL ," + // 2: userNickName
                "\"USER_HEAD_IMAGE_URL\" TEXT NOT NULL ," + // 3: userHeadImageUrl
                "\"USER_GENDER\" TEXT NOT NULL ," + // 4: userGender
                "\"USER_ADDRESS\" TEXT," + // 5: userAddress
                "\"USER_PERSONALITY_SIGNATURE\" TEXT," + // 6: userPersonalitySignature
                "\"USER_DISTANCE\" TEXT);"); // 7: userDistance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEARBY_PEOPLE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NearbyPeopleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getUserNickName());
        stmt.bindString(4, entity.getUserHeadImageUrl());
        stmt.bindString(5, entity.getUserGender());
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(6, userAddress);
        }
 
        String userPersonalitySignature = entity.getUserPersonalitySignature();
        if (userPersonalitySignature != null) {
            stmt.bindString(7, userPersonalitySignature);
        }
 
        String userDistance = entity.getUserDistance();
        if (userDistance != null) {
            stmt.bindString(8, userDistance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NearbyPeopleEntity readEntity(Cursor cursor, int offset) {
        NearbyPeopleEntity entity = new NearbyPeopleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // chatID
            cursor.getString(offset + 2), // userNickName
            cursor.getString(offset + 3), // userHeadImageUrl
            cursor.getString(offset + 4), // userGender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userPersonalitySignature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userDistance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NearbyPeopleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setUserNickName(cursor.getString(offset + 2));
        entity.setUserHeadImageUrl(cursor.getString(offset + 3));
        entity.setUserGender(cursor.getString(offset + 4));
        entity.setUserAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserPersonalitySignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserDistance(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NearbyPeopleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NearbyPeopleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
